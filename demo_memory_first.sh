#!/bin/bash

echo "üß† Dremio MCP Memory-First Workflow Demo"
echo "This demo shows the improved memory-first approach for data analysis"
echo ""

echo "============================================================"
echo " Scenario: User asks 'Show me top 10 quarterbacks of 2023'"
echo "============================================================"
echo ""

echo "STEP 1: Search for relevant memories FIRST (before schema discovery)"
echo "Command: SearchRelevantMemories"
echo ""
uv run dremio-mcp-server tools invoke -t SearchRelevantMemories question="show me top 10 quarterbacks of 2023" 2>/dev/null | grep -A 20 "matches"
echo ""

echo "============================================================"
echo " STEP 2: Get the full methodology from memory"
echo "============================================================"
echo "Command: GetMemory for the methodology"
echo ""
uv run dremio-mcp-server tools invoke -t GetMemory id="quarterback_analysis_methodology" 2>/dev/null | grep -A 30 "text"
echo ""

echo "============================================================"
echo " STEP 3: Get key learnings to avoid common mistakes"
echo "============================================================"
echo "Command: GetMemory for key learnings"
echo ""
uv run dremio-mcp-server tools invoke -t GetMemory id="qb_analysis_key_learnings" 2>/dev/null | grep -A 20 "text"
echo ""

echo "============================================================"
echo " STEP 4: Search for any other relevant approaches"
echo "============================================================"
echo "Command: SearchMemory with specific terms"
echo ""
uv run dremio-mcp-server tools invoke -t SearchMemory query="NFL quarterback EPA rushing sacks" top_k=3 2>/dev/null | grep -A 15 "matches"
echo ""

echo "============================================================"
echo " WORKFLOW COMPARISON"
echo "============================================================"
echo ""
echo "‚ùå OLD APPROACH (what happened before):"
echo "   1. User: 'Show me top 10 QBs of 2023'"
echo "   2. Assistant: Starts schema discovery"
echo "   3. Assistant: Finds myData.pbp table"
echo "   4. Assistant: Creates basic passing-only query"
echo "   5. User: 'Include rushing and sacks'"
echo "   6. Assistant: Modifies query through trial and error"
echo "   7. Multiple iterations to get the right methodology"
echo ""
echo "‚úÖ NEW APPROACH (memory-first):"
echo "   1. User: 'Show me top 10 QBs of 2023'"
echo "   2. Assistant: SearchRelevantMemories FIRST"
echo "   3. Assistant: Finds stored QB methodology"
echo "   4. Assistant: Uses complete approach (passing + rushing + sacks)"
echo "   5. Assistant: Gets correct results immediately"
echo "   6. No trial and error needed!"
echo ""

echo "============================================================"
echo " KEY BENEFITS"
echo "============================================================"
echo "üöÄ FASTER: Skip schema discovery when methodology exists"
echo "üéØ ACCURATE: Use proven approaches instead of guessing"
echo "üìö CONSISTENT: Same methodology across all sessions"
echo "üß† LEARNING: Build institutional knowledge over time"
echo ""

echo "============================================================"
echo " MEMORY TOOLS PRIORITY ORDER"
echo "============================================================"
echo "1. SearchRelevantMemories - Check for any relevant approach"
echo "2. SearchMemory - Find specific domain knowledge"
echo "3. GetMemory - Retrieve full methodology details"
echo "4. THEN proceed to schema discovery if needed"
echo "5. PutMemory - Store new approaches for future use"
echo ""

echo "üéâ Ready for Claude Desktop with memory-first workflow!"
echo "The assistant will now search memories before schema discovery!"
